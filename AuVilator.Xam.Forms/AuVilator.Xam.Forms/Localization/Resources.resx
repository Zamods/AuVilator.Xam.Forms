<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuVilator_Welcome" xml:space="preserve">
    <value>Welcome to AuVilator.</value>
  </data>
  <data name="BinSizeSelectedLabelText" xml:space="preserve">
    <value>Samples</value>
  </data>
  <data name="BinSizeSelectionInformationText" xml:space="preserve">
    <value>Select bin size you prefer AuVilator to process the media file. 
Note, Bigger the size of bin means more computation will be performed by AuVilator which makes processing slow. 
Smaller bin size allows to purge more silence as compared to higher size whereas higher size can result in loss of non silence signals.</value>
  </data>
  <data name="BinSizeSelectionTitleText" xml:space="preserve">
    <value>Select Bin Size for Signal Analysis</value>
  </data>
  <data name="EndAmpPosInformationText" xml:space="preserve">
    <value>Select amplitude value to identify non silent signal. 
Note, AuVilator uses this value to search for the ending point of non silent signal bin. 
Please, Keep in mind that bin size affects these value in direct relation.</value>
  </data>
  <data name="EndAmpPosSelectionTitleText" xml:space="preserve">
    <value>Select Ending Amplitude for Signal</value>
  </data>
  <data name="FileSelectionButtonText" xml:space="preserve">
    <value>Choose Audio File</value>
  </data>
  <data name="FileSelectionTitleText" xml:space="preserve">
    <value>Select Audio File to Purge Silence</value>
  </data>
  <data name="Gen_Error_Stack" xml:space="preserve">
    <value>Error stack:</value>
  </data>
  <data name="InformationCloseButtonText" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="InformationTitleText" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="NoFileSelected" xml:space="preserve">
    <value>No file selected yet!</value>
  </data>
  <data name="RunSilencerButtonText" xml:space="preserve">
    <value>Run Silencer</value>
  </data>
  <data name="SelectFileInformationText" xml:space="preserve">
    <value>Select any audio or video file to process.
However, AuVilator will only extract audio signals regardless of file format and return results in wav file.</value>
  </data>
  <data name="Settings_V_Language_Change_Btn" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="Settings_V_Language_TB" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Settings_V_Main_Title" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SilencerVM_CFF_EX_Caption" xml:space="preserve">
    <value>Wrong File Format!</value>
  </data>
  <data name="SilencerVM_CFF_EX_Text_1" xml:space="preserve">
    <value>The Selected file</value>
  </data>
  <data name="SilencerVM_CFF_EX_Text_2" xml:space="preserve">
    <value>is not .wav format.</value>
  </data>
  <data name="SilencerVM_CFF_EX_Text_3" xml:space="preserve">
    <value>Please reselect the file.</value>
  </data>
  <data name="SilencerVM_LF_EX_Caption" xml:space="preserve">
    <value>Error while loading file!</value>
  </data>
  <data name="SilencerVM_LF_EX_Text" xml:space="preserve">
    <value>AuVilator failed to load the selected file.</value>
  </data>
  <data name="SilencerVM_LF_MB_No_Selected_Caption" xml:space="preserve">
    <value>File Select</value>
  </data>
  <data name="SilencerVM_LF_MB_No_Selected_Text" xml:space="preserve">
    <value>No file selected!</value>
  </data>
  <data name="SilencerVM_LF_Select_Picker_Filter_All" xml:space="preserve">
    <value>All files</value>
  </data>
  <data name="SilencerVM_LF_Select_Picker_Filter_Audio" xml:space="preserve">
    <value>Audio files</value>
  </data>
  <data name="SilencerVM_LF_Select_Wav_Title" xml:space="preserve">
    <value>Select .wav file to process.</value>
  </data>
  <data name="SilencerVM_SF_EX_Caption" xml:space="preserve">
    <value>Error while getting file save path or name!</value>
  </data>
  <data name="SilencerVM_SF_EX_Text" xml:space="preserve">
    <value>AuVilator failed to get provided save path or name.</value>
  </data>
  <data name="SilencerVM_SF_MB_No_Selected_Text" xml:space="preserve">
    <value>No file path or name provided!</value>
  </data>
  <data name="SilencerVM_SF_Save_Picker_Title" xml:space="preserve">
    <value>Save as</value>
  </data>
  <data name="SilencerVM_STA_EX_Caption" xml:space="preserve">
    <value>Process Failed!</value>
  </data>
  <data name="SilencerVM_STA_EX_Text" xml:space="preserve">
    <value>Something went wrong while processing the given file.</value>
  </data>
  <data name="SilencerVM_STA_MB_Caption" xml:space="preserve">
    <value>Process Completed!</value>
  </data>
  <data name="SilencerVM_STA_MB_Text" xml:space="preserve">
    <value>Your audio file successfully processed!</value>
  </data>
  <data name="Silencer_V_Cancel_Btn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="StartAmpPosInformationText" xml:space="preserve">
    <value>Select amplitude value to identify non silent signal. 
Note, AuVilator uses this value to search for the starting point of non silent signal bin. 
Please, Keep in mind that bin size affects these value in direct relation.</value>
  </data>
  <data name="StartAmpPosSelectionTitleText" xml:space="preserve">
    <value>Select Starting Amplitude for Signal</value>
  </data>
  <data name="Button_OK" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="BinSizePickerText" xml:space="preserve">
    <value>Choose Bin Size</value>
  </data>
  <data name="Settings_V_Language_Change_Picker_Title" xml:space="preserve">
    <value>Choose Language</value>
  </data>
</root>